<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 北辰</title>
    <link>https://zhengfanhua.github.io/posts/</link>
    <description>Recent content in Posts on 北辰</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 29 Sep 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://zhengfanhua.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JQ的ajax点击事件只执行第一次的解决方案</title>
      <link>https://zhengfanhua.github.io/posts/test-9/</link>
      <pubDate>Sun, 29 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zhengfanhua.github.io/posts/test-9/</guid>
      <description>最近在项目中用到了ajax的方法，在中途遇到了一个小障碍，ajax请求是正确的，可是点击事件只执行第一次点击，第二次点击的时候就无效了，只有刷新页面之后才可以点击，点击之后再点击还是无效。代码如下： $(&amp;quot;.ttx&amp;quot;).click(function(){ var abc=$(this).attr(&#39;id&#39;); $.ajax({ url: &#39;user.php?act=tuan_check&#39;,//请求地址 type: &#39;GET&#39;,//用get方式获取 dataType: &#39;html&#39;,//请求数据类型为html data: {user_id:abc,pass:&amp;quot;yes&amp;quot;},//重要：请求地址后面所带参数，格式/user.php?act=tuan_check&amp;amp;user_id=abc&amp;amp;pass=yes contentType: &amp;quot;application/json; charset=utf-8&amp;quot;,//请求内容格式 timeout: 10000,//超时10秒后报错 success: function(data){//请求成功后执行的函数，可以用alert(data);看看请求的数据以查看通过率 $(&#39;#&#39;+abc).removeClass(&#39;ttx&#39;).addClass(&#39;bfo2&#39;).html(&amp;quot;已通过&amp;quot;); }, error: function(err){//请求失败后执行的函数 alert(&amp;quot;正在请求，请稍候...&amp;quot;); }});})  这个也是标准的ajax请求后台数据代码，进行前台会员审核通过与不通过的ajax操作，大家参考一下。只是点击事件出现了问题，其实是这种click写法对动态写入的dom无效，因为第一次点击的时候我改变了class值，所以单纯的click无法找到更改的class，所以只适合单一的点击事件，修复后代码如下： $(&amp;quot;.ttx&amp;quot;).live(&#39;click&#39;,function(){ var abc=$(this).attr(&#39;id&#39;); $.ajax({ url: &#39;user.php?act=tuan_check&#39;, type: &#39;GET&#39;, dataType: &#39;html&#39;, data: {user_id:abc,pass:&amp;quot;yes&amp;quot;}, contentType: &amp;quot;application/json; charset=utf-8&amp;quot;, timeout: 10000, success: function(data){ $(&#39;#&#39;+abc).removeClass(&#39;ttx&#39;).addClass(&#39;bfo2&#39;).html(&amp;quot;已通过&amp;quot;);}, error: function(err){ alert(&amp;quot;正在请求，请稍候...&amp;quot;); }});})  扩展阅读：jq的点击事件大全： 1.bind绑定事件 $(&amp;ldquo;#qiuye&amp;rdquo;).bind(&amp;lsquo;click&amp;rsquo;,function(){&amp;hellip;}); 绑定事件，可绑定多个事件： $(&amp;lsquo;#qiuye&amp;rsquo;).bind(&amp;lsquo;click mouseover&amp;rsquo;,function(){&amp;hellip;});
可绑定多个处理函数： $(&amp;lsquo;#qiuye&amp;rsquo;).bind({ click:function(){&amp;hellip;}, mouseover:function(){&amp;hellip;} })
2.One一次性点击，只执行第一次点击，第二次点击将不再起作用，除了刷新页面。 $(&amp;lsquo;#qiuye&amp;rsquo;).one(&amp;lsquo;click&amp;rsquo;,function(){ alert(&amp;lsquo;a&amp;rsquo;); })
3.live可绑定动态添加的html元素，用js写入的文档一样可以识别。 $(&amp;lsquo;#qiuye&amp;rsquo;).</description>
    </item>
    
    <item>
      <title>如何采用Hugo搭建博客</title>
      <link>https://zhengfanhua.github.io/posts/hugo/</link>
      <pubDate>Sat, 28 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zhengfanhua.github.io/posts/hugo/</guid>
      <description>使用Hugo(基于Go语言的博客框架)搭建个人博客网站(前提：已安装git) 1.Windows 64位系统下安装Hugo a.Hugo框架下载地址,找到hugo_0.55.4_Windows-64bit.zip文件进行下载，下载后进行解压，即安装完成。 b.查看是否安装成功Hugo：在D:\Hugo\hugo_0.55.4_Windows-64bit路径下，以管理员身份打开cmd控制台，然后输入hugo version，出现结果表示安装成功。 2.验证Hugo是否安装成功,用Hugo来生成个人博客 a.在D:\Hugo\hugo_0.55.4_Windows-64bit路径下，以管理员身份打开cmd控制台，然后输入hugo new site myblog(自定义的博客名) b.切换到生成的myblog(博客的根目录)文件夹目录下，进行下一步下载主题 3.下载并设置博客主题 a.Hugo主题下载地址,下面以主题m10c为例进行演示。 b.确保自己电脑上已经安装好了Git，然后打开git bash,切换到生成的myblog(博客的根目录)文件夹目录下,执行git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c,下载好的主题在D:\Hugo\hugo_0.55.4_Windows-64bit\myblog\themes目录下。 4.在本地启动个人博客 a.切换到博客的根目录下，cmd中输入命令hugo server -t m10c &amp;ndash;buildDrafts 本地启动个人博客,复制网址 http://localhost 到浏览器中，查看站点是否运行成功 5.实际写一篇文章 a.切换到博客的根目录下，cmd中输入命令hugo new post/blog.md(自定义markdown文件名)，然后会在D:\Hugo\hugo_0.55.4_Windows-64bit\myblog\content\post路径下生成了blog.md文件，然后再使用vs code或者其它能编写markdown文件的编辑器打开blog.md文件，写入博客文章的具体内容，注意不要修改原始的blog.md文件中已经有的内容！ b.接着，切换到博客的根目录下，cmd中输入命令hugo server -t m10c &amp;ndash;buildDraftsc, 复制网址http://localhost:1313/, 到浏览器中，查看站点上的内容是否已经更新完成，显示我们刚刚编写的博客文章。注意：每次修改完blog.md文件中的内容后，需要重新在cmd中输入命令hugo server -t m10c &amp;ndash;buildDrafts ，这样http://localhost:1313/ 链接中的页面才会更新。 6.将个人博客部署到远端服务器 a.上面的一系列操作，得到的博客网站的站点只能在自己的电脑上本地访问，要想别人能访问你的博客网站，必须将个人博客部署到远端服务器。首先，你要有一个github账号，然后创建一个仓库，注意：创建仓库的命名必须是你github的昵称且必须小写再加上.github.io。例如，你的github昵称是zhengfanhua,因此创建的仓库名必须是zhengfanhua.github.io。 b.接着，切换到博客的根目录下，cmd中输入命令hugo &amp;ndash;theme=m10c(主题名) &amp;ndash;baseUrl=&amp;ldquo;https://zhengfanhua.github.io/(仓库地址)&amp;quot; &amp;ndash;buildDrafts c,然后会在博客的根目录myblog下生成一个public文件夹。切换到public文件目录下，在git bash中输入命令git init,将此public文件夹变成git本地仓库，然后输入git add ., 将public文件夹下的所有文件放入暂存区中等待提交，接着输入git commit -m &amp;ldquo;我的Hugo博客第一次提交&amp;rdquo;，这样就将本地仓库中的文件提交到了远程仓库。在接着，输入git remote add origin https://github.com/zhengfanhua/zhengfanhua.github.io.git,最后，输入命令git push -u origin master,将本地仓库代码推送到远程库。 c.</description>
    </item>
    
  </channel>
</rss>